// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: akun.sql

package database

import (
	"context"
)

const changeSaldo = `-- name: ChangeSaldo :one
UPDATE akun
SET saldo = saldo + $2
WHERE id = $1
RETURNING id, nama, saldo, dibuat_pada
`

type ChangeSaldoParams struct {
	ID     int64 `json:"id"`
	Jumlah int64 `json:"jumlah"`
}

func (q *Queries) ChangeSaldo(ctx context.Context, arg ChangeSaldoParams) (Akun, error) {
	row := q.db.QueryRowContext(ctx, changeSaldo, arg.ID, arg.Jumlah)
	var i Akun
	err := row.Scan(
		&i.ID,
		&i.Nama,
		&i.Saldo,
		&i.DibuatPada,
	)
	return i, err
}

const createAkun = `-- name: CreateAkun :one
INSERT INTO akun
(nama, saldo)
VALUES
($1, $2)
RETURNING id, nama, saldo, dibuat_pada
`

type CreateAkunParams struct {
	Nama  string `json:"nama"`
	Saldo int64  `json:"saldo"`
}

func (q *Queries) CreateAkun(ctx context.Context, arg CreateAkunParams) (Akun, error) {
	row := q.db.QueryRowContext(ctx, createAkun, arg.Nama, arg.Saldo)
	var i Akun
	err := row.Scan(
		&i.ID,
		&i.Nama,
		&i.Saldo,
		&i.DibuatPada,
	)
	return i, err
}

const deleteAkun = `-- name: DeleteAkun :exec
DELETE FROM akun
WHERE id = $1
`

func (q *Queries) DeleteAkun(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAkun, id)
	return err
}

const getAkun = `-- name: GetAkun :one
SELECT id, nama, saldo, dibuat_pada FROM akun
WHERE id = $1
`

func (q *Queries) GetAkun(ctx context.Context, id int64) (Akun, error) {
	row := q.db.QueryRowContext(ctx, getAkun, id)
	var i Akun
	err := row.Scan(
		&i.ID,
		&i.Nama,
		&i.Saldo,
		&i.DibuatPada,
	)
	return i, err
}

const getAkunForUpdate = `-- name: GetAkunForUpdate :one
SELECT id, nama, saldo, dibuat_pada FROM akun
WHERE id = $1
FOR NO KEY UPDATE
`

func (q *Queries) GetAkunForUpdate(ctx context.Context, id int64) (Akun, error) {
	row := q.db.QueryRowContext(ctx, getAkunForUpdate, id)
	var i Akun
	err := row.Scan(
		&i.ID,
		&i.Nama,
		&i.Saldo,
		&i.DibuatPada,
	)
	return i, err
}

const listAkun = `-- name: ListAkun :many
SELECT id, nama, saldo, dibuat_pada FROM akun
LIMIT $1
OFFSET $2
`

type ListAkunParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAkun(ctx context.Context, arg ListAkunParams) ([]Akun, error) {
	rows, err := q.db.QueryContext(ctx, listAkun, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Akun{}
	for rows.Next() {
		var i Akun
		if err := rows.Scan(
			&i.ID,
			&i.Nama,
			&i.Saldo,
			&i.DibuatPada,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAkun = `-- name: UpdateAkun :one
UPDATE akun
SET saldo = $2
WHERE id = $1
RETURNING id, nama, saldo, dibuat_pada
`

type UpdateAkunParams struct {
	ID    int64 `json:"id"`
	Saldo int64 `json:"saldo"`
}

func (q *Queries) UpdateAkun(ctx context.Context, arg UpdateAkunParams) (Akun, error) {
	row := q.db.QueryRowContext(ctx, updateAkun, arg.ID, arg.Saldo)
	var i Akun
	err := row.Scan(
		&i.ID,
		&i.Nama,
		&i.Saldo,
		&i.DibuatPada,
	)
	return i, err
}
